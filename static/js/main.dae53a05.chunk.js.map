{"version":3,"sources":["components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js"],"names":["AddContactButton","styled","button","InputValue","input","ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","reset","onSubmit","this","type","onChange","pattern","title","required","Component","Filter","onChangeFilter","DeleteContactButton","ContactList","contacts","onDeleteButtonClick","map","id","onClick","Global","createGlobalStyle","PhoneBookContainer","div","App","filter","updateStateContact","param","nameToFind","toLowerCase","some","contact","toast","error","newContact","nanoid","prevState","updateStateFilter","getFilteredContacts","normalizedFilter","includes","deleteContactById","idToDel","setTimeout","duration","icon","console","log","localStorage","getItem","parsedContacts","JSON","parse","notifyPhoneBookEmpty","Promise","resolve","reject","setItem","stringify","then","FilteredContacts","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dae53a05.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst AddContactButton = styled.button`\n   {\n    padding: 5px 30px;\n    margin: 10px;\n    border: 1px solid #ccc;\n    border-radius: 10%;\n    box-shadow: 0px 4px 10px 2px rgba(black, 0.2);\n    font-weight: bold;\n    color: #00ff00;\n    cursor: pointer;\n  }\n`;\nconst InputValue = styled.input`\n   {\n    padding: 5px;\n    margin: 10px;\n    background-color: #efefef;\n    border-color: #cccccc;\n  }\n`;\n\nexport default class ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onAddContact({ ...this.state });\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:&nbsp;&nbsp;&nbsp;\n          <InputValue\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <br />\n        <label>\n          Number:\n          <InputValue\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <br />\n\n        <AddContactButton type=\"submit\">Add contact</AddContactButton>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst InputValue = styled.input`\n   {\n    padding: 5px;\n    margin: 10px;\n    background-color: #efefef;\n    border-color: #cccccc;\n  }\n`;\n\nexport default function Filter({ value, onChangeFilter }) {\n  return (\n    <label>\n      <i>Find contacts by name</i>\n      <InputValue\n        type=\"text\"\n        value={value}\n        onChange={e => onChangeFilter(e.target.value)}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst DeleteContactButton = styled.button`\n   {\n    padding: 5px 20px;\n    margin: 10px;\n    border: 1px solid #ccc;\n    border-radius: 10%;\n    box-shadow: 0px 4px 10px 2px rgba(black, 0.2);\n    color: #ff0000;\n    border-color: #cccccc;\n    cursor: pointer;\n  }\n`;\n\nconst ContactList = ({ contacts, onDeleteButtonClick }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <DeleteContactButton\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => onDeleteButtonClick({ id })}\n          >\n            Delete\n          </DeleteContactButton>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n    }),\n  ),\n\n  onDeleteButtonClick: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport toast, { Toaster } from 'react-hot-toast';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nconst Global = createGlobalStyle`\n*{\n  margin: 0px;\n  padding: 0px;\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 20px;\n}\n\nh1, h2{ \nmargin: 10px;\n}\n`;\n\nconst PhoneBookContainer = styled.div`\n   {\n    width: 100%;\n  }\n`;\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  updateStateContact = param => {\n    const nameToFind = param.name.toLowerCase();\n\n    const result = this.state.contacts.some(\n      contact => contact.name.toLowerCase() === nameToFind,\n    );\n\n    if (result) {\n      toast.error('This Name is already exists !');\n      return;\n    }\n\n    const newContact = { id: nanoid(5), ...param };\n    this.setState(prevState => ({\n      contacts: [...prevState.contacts, newContact],\n    }));\n  };\n\n  updateStateFilter = filter => {\n    this.setState({ filter });\n\n    this.getFilteredContacts();\n  };\n\n  getFilteredContacts = () => {\n    const normalizedFilter = this.state.filter.toLowerCase();\n    return this.state.contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  deleteContactById = id => {\n    const { id: idToDel } = id;\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter(({ id }) => id !== idToDel),\n      };\n    });\n  };\n\n  notifyPhoneBookEmpty() {\n    setTimeout(() => {\n      toast('Your phonebook is empty', {\n        duration: 1500,\n        icon: '☎️',\n      });\n    }, 1200);\n  }\n\n  componentDidMount() {\n    console.log('App componentDidMount');\n\n    if (localStorage.getItem('contacts') === null) {\n      this.notifyPhoneBookEmpty();\n      return;\n    }\n\n    const parsedContacts = JSON.parse(localStorage.getItem('contacts'));\n\n    setTimeout(() => {\n      this.setState({ contacts: parsedContacts });\n    }, 1000);\n  }\n\n  componentDidUpdate(prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      const promise = new Promise((resolve, reject) => {\n        resolve(\n          localStorage.setItem('contacts', JSON.stringify(this.state.contacts)),\n        );\n        reject(console.log('Cant write to locale storage'));\n      });\n\n      promise.then(() => {\n        if (localStorage.getItem('contacts') === '[]') {\n          this.notifyPhoneBookEmpty();\n        }\n      });\n    }\n  }\n\n  render() {\n    const FilteredContacts = this.getFilteredContacts();\n\n    return (\n      <>\n        <Global />\n        <PhoneBookContainer>\n          <Toaster />\n          <h1>Phonebook</h1>\n          <ContactForm onAddContact={this.updateStateContact} />\n          <h2>Contacts</h2>\n\n          {this.state.contacts.length > 0 && (\n            <Filter\n              value={this.state.filter}\n              onChangeFilter={this.updateStateFilter}\n            />\n          )}\n\n          <ContactList\n            contacts={FilteredContacts}\n            onDeleteButtonClick={this.deleteContactById}\n          />\n        </PhoneBookContainer>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}